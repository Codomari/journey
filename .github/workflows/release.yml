name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Read current version
        id: current_version
        run: |
          CURRENT_VERSION=$(cat VERSION)
          echo "Current version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment based on release type
          case "$RELEASE_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update VERSION file
        run: |
          echo "${{ steps.new_version.outputs.version }}" > VERSION
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add VERSION
          git commit -m "Bump version to ${{ steps.new_version.outputs.version }}"
          git push

      - name: Build and package release
        run: |
          # Build binary
          go build -o journey
          chmod +x journey
          
          # Create release directory with version
          RELEASE_DIR="journey-${{ steps.new_version.outputs.version }}"
          mkdir -p "release/${RELEASE_DIR}"
          
          # Copy all required files
          cp -r content "release/${RELEASE_DIR}/"
          cp -r built-in "release/${RELEASE_DIR}/"
          cp LICENSE.md "release/${RELEASE_DIR}/"
          cp README.md "release/${RELEASE_DIR}/"
          cp VERSION "release/${RELEASE_DIR}/"
          cp config.json "release/${RELEASE_DIR}/"
          cp journey "release/${RELEASE_DIR}/"
          
          # Create zip
          cd release
          zip -r "${RELEASE_DIR}-linux-amd64.zip" "${RELEASE_DIR}"
          cd ..

      - name: Build for other platforms
        run: |
          RELEASE_DIR="journey-${{ steps.new_version.outputs.version }}"
          
          # Build for macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -o journey
          mkdir -p "release/${RELEASE_DIR}-darwin-amd64"
          cp -r content "release/${RELEASE_DIR}-darwin-amd64/"
          cp -r built-in "release/${RELEASE_DIR}-darwin-amd64/"
          cp LICENSE.md "release/${RELEASE_DIR}-darwin-amd64/"
          cp README.md "release/${RELEASE_DIR}-darwin-amd64/"
          cp VERSION "release/${RELEASE_DIR}-darwin-amd64/"
          cp config.json "release/${RELEASE_DIR}-darwin-amd64/"
          cp journey "release/${RELEASE_DIR}-darwin-amd64/"
          cd release
          zip -r "${RELEASE_DIR}-darwin-amd64.zip" "${RELEASE_DIR}-darwin-amd64"
          cd ..
          
          # Build for Windows AMD64
          GOOS=windows GOARCH=amd64 go build -o journey.exe
          mkdir -p "release/${RELEASE_DIR}-windows-amd64"
          cp -r content "release/${RELEASE_DIR}-windows-amd64/"
          cp -r built-in "release/${RELEASE_DIR}-windows-amd64/"
          cp LICENSE.md "release/${RELEASE_DIR}-windows-amd64/"
          cp README.md "release/${RELEASE_DIR}-windows-amd64/"
          cp VERSION "release/${RELEASE_DIR}-windows-amd64/"
          cp config.json "release/${RELEASE_DIR}-windows-amd64/"
          cp journey.exe "release/${RELEASE_DIR}-windows-amd64/"
          cd release
          zip -r "${RELEASE_DIR}-windows-amd64.zip" "${RELEASE_DIR}-windows-amd64"
          cd ..

      - name: Generate release notes
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" --no-merges | head -20)
          else
            COMMITS=$(git log "${LAST_TAG}..HEAD" --pretty=format:"- %s" --no-merges)
          fi
          
          cat > release_notes.md << EOF
          # Journey v${{ steps.new_version.outputs.version }}
          
          ## Installation
          
          1. Download the appropriate archive for your platform
          2. Extract the zip archive
          3. Run Journey:
             - Linux/macOS: \`./journey\`
             - Windows: \`journey.exe\`
          
          ## What's Changed
          
          $COMMITS
          
          ## Package Contents
          
          Each release package includes:
          - \`journey\` (or \`journey.exe\` on Windows) - The compiled binary
          - \`content/\` - Content directory structure
          - \`built-in/\` - Built-in resources (admin interface, public assets)
          - \`config.json\` - Default configuration file
          - \`LICENSE.md\` - License information
          - \`README.md\` - Documentation
          - \`VERSION\` - Version file
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: Journey v${{ steps.new_version.outputs.version }}
          body_path: release_notes.md
          files: |
            release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}